// üßÆ MATEMATƒ∞KSEL GRUPLARA AYRILMI≈û FIELD TYPE'LARI

export const fieldTypeGroups = {
  // üî¢ TEMEl VERƒ∞ Tƒ∞PLERƒ∞
  basic: {
    title: 'Temel Veri Tipleri',
    icon: 'üìÑ',
    types: [
      { value: 'string', label: 'Metin (String)', icon: 'üìù', mathCapable: false },
      { value: 'text', label: 'Uzun Metin (Text)', icon: 'üìú', mathCapable: false },
      { value: 'boolean', label: 'Boolean', icon: '‚òëÔ∏è', mathCapable: false },
      { value: 'date', label: 'Tarih (Date)', icon: 'üìÖ', mathCapable: true }, // Date math
      { value: 'object', label: 'Nesne (Object)', icon: 'üóÇÔ∏è', mathCapable: false },
      { value: 'array', label: 'Dizi (Array)', icon: 'üìã', mathCapable: true }, // Array operations
    ]
  },

  // üßÆ MATEMATƒ∞KSEL VERƒ∞ Tƒ∞PLERƒ∞
  mathematical: {
    title: 'Matematiksel Veri Tipleri',
    icon: 'üßÆ',
    types: [
      { value: 'number', label: 'Sayƒ± (Number)', icon: 'üî¢', mathCapable: true },
      { value: 'integer', label: 'Tam Sayƒ± (Integer)', icon: 'üî¢', mathCapable: true },
      { value: 'float', label: 'Ondalƒ±k Sayƒ± (Float)', icon: 'üî¢', mathCapable: true },
      { value: 'decimal', label: 'Hassas Ondalƒ±k (Decimal)', icon: 'üî¢', mathCapable: true },
      { value: 'percentage', label: 'Y√ºzde (Percentage)', icon: 'üìä', mathCapable: true },
      { value: 'ratio', label: 'Oran (Ratio)', icon: '‚öñÔ∏è', mathCapable: true },
    ]
  },

  // üé≤ MATRƒ∞X VE √áOK BOYUTLU VERƒ∞ Tƒ∞PLERƒ∞
  matrix: {
    title: 'Matrix ve √áok Boyutlu Veri Tipleri',
    icon: 'üé≤',
    types: [
      { value: 'matrix', label: 'Matrix', icon: 'üî≥', mathCapable: true },
      { value: 'vector', label: 'Vekt√∂r', icon: '‚û°Ô∏è', mathCapable: true },
      { value: 'tensor', label: 'Tens√∂r', icon: 'üéØ', mathCapable: true },
      { value: 'coordinates', label: 'Koordinat', icon: 'üìç', mathCapable: true },
      { value: 'dataset', label: 'Veri Seti', icon: 'üìä', mathCapable: true },
    ]
  },

  // üí∞ Fƒ∞NANSAL VERƒ∞ Tƒ∞PLERƒ∞
  financial: {
    title: 'Finansal Veri Tipleri',
    icon: 'üí∞',
    types: [
      { value: 'currency', label: 'Para Birimi (Currency)', icon: 'üí∞', mathCapable: true },
      { value: 'price', label: 'Fiyat (Price)', icon: 'üíµ', mathCapable: true },
      { value: 'tax', label: 'Vergi (Tax)', icon: 'üìä', mathCapable: true },
      { value: 'discount', label: 'ƒ∞ndirim (Discount)', icon: 'üè∑Ô∏è', mathCapable: true },
      { value: 'interest', label: 'Faiz (Interest)', icon: 'üìà', mathCapable: true },
    ]
  },

  // üìè Fƒ∞Zƒ∞KSEL √ñL√á√úM Tƒ∞PLERƒ∞
  measurement: {
    title: 'Fiziksel √ñl√ß√ºm Tipleri',
    icon: 'üìè',
    types: [
      { value: 'weight', label: 'Aƒüƒ±rlƒ±k (Weight)', icon: '‚öñÔ∏è', mathCapable: true },
      { value: 'length', label: 'Uzunluk (Length)', icon: 'üìè', mathCapable: true },
      { value: 'area', label: 'Alan (Area)', icon: '‚¨ú', mathCapable: true },
      { value: 'volume', label: 'Hacim (Volume)', icon: 'üßä', mathCapable: true },
      { value: 'temperature', label: 'Sƒ±caklƒ±k (Temperature)', icon: 'üå°Ô∏è', mathCapable: true },
      { value: 'speed', label: 'Hƒ±z (Speed)', icon: 'üèÉ', mathCapable: true },
    ]
  },

  // ‚è±Ô∏è ZAMAN VE TARƒ∞H Tƒ∞PLERƒ∞
  temporal: {
    title: 'Zaman ve Tarih Tipleri',
    icon: '‚è±Ô∏è',
    types: [
      { value: 'datetime', label: 'Tarih-Saat (DateTime)', icon: 'üìÖ', mathCapable: true },
      { value: 'time', label: 'Saat (Time)', icon: '‚è∞', mathCapable: true },
      { value: 'duration', label: 'S√ºre (Duration)', icon: '‚è±Ô∏è', mathCapable: true },
      { value: 'age', label: 'Ya≈ü (Age)', icon: 'üéÇ', mathCapable: true },
      { value: 'timestamp', label: 'Zaman Damgasƒ± (Timestamp)', icon: '‚è∞', mathCapable: true },
    ]
  },

  // üìä ƒ∞STATƒ∞STƒ∞KSEL VERƒ∞ Tƒ∞PLERƒ∞
  statistical: {
    title: 'ƒ∞statistiksel Veri Tipleri',
    icon: 'üìä',
    types: [
      { value: 'score', label: 'Puan (Score)', icon: 'üéØ', mathCapable: true },
      { value: 'rating', label: 'Deƒüerlendirme (Rating)', icon: '‚≠ê', mathCapable: true },
      { value: 'rank', label: 'Sƒ±ralama (Rank)', icon: 'üèÜ', mathCapable: true },
      { value: 'probability', label: 'Olasƒ±lƒ±k (Probability)', icon: 'üé≤', mathCapable: true },
      { value: 'frequency', label: 'Frekans (Frequency)', icon: 'üìà', mathCapable: true },
    ]
  },

  // üîó ƒ∞Lƒ∞≈ûKƒ∞SEL VERƒ∞ Tƒ∞PLERƒ∞
  relational: {
    title: 'ƒ∞li≈ükisel Veri Tipleri',
    icon: 'üîó',
    types: [
      { value: 'foreign_key', label: 'Yabancƒ± Anahtar (Foreign Key)', icon: 'üîë', mathCapable: false },
      { value: 'relationship', label: 'ƒ∞li≈üki (Relationship)', icon: 'üîó', mathCapable: false },
      { value: 'reference', label: 'Referans (Reference)', icon: 'üóùÔ∏è', mathCapable: false },
    ]
  }
};

// Geriye uyumluluk i√ßin eski format
export const dataTypes = Object.values(fieldTypeGroups)
  .flatMap(group => group.types)
  .map(type => ({
    value: type.value,
    label: type.label,
    icon: type.icon
  }));

export const currencies = [
  { value: 'TRY', label: 'T√ºrk Lirasƒ± (‚Ç∫)' },
  { value: 'USD', label: 'US Dollar ($)' },
  { value: 'EUR', label: 'Euro (‚Ç¨)' },
  { value: 'GBP', label: 'British Pound (¬£)' },
  { value: 'JPY', label: 'Japanese Yen (¬•)' },
];

export const weightUnits = [
  { value: 'g', label: 'Gram (g)' },
  { value: 'kg', label: 'Kilogram (kg)' },
  { value: 'lb', label: 'Pound (lb)' },
  { value: 'oz', label: 'Ounce (oz)' },
  { value: 't', label: 'Ton (t)' },
];

export const relationshipTypes = [
  { value: 'one-to-one', label: 'Bire Bir (1:1)', icon: 'üîó' },
  { value: 'one-to-many', label: 'Bire √áok (1:N)', icon: 'üîóüìã' },
  { value: 'many-to-many', label: '√áoka √áok (N:N)', icon: 'üîóüîó' },
];

// üßÆ MATEMATƒ∞KSEL HELPER FUNCTIONS
export const getTypeIcon = (type: string) => {
  const typeData = dataTypes.find(t => t.value === type);
  return typeData?.icon || 'üìÑ';
};

export const getTypelabel = (type: string) => {
  const typeData = dataTypes.find(t => t.value === type);
  return typeData?.label || type;
};

// Matematiksel i≈ülem yapabilen field'larƒ± filtrele
export const getMathCapableTypes = () => {
  return Object.values(fieldTypeGroups)
    .flatMap(group => group.types)
    .filter(type => type.mathCapable);
};

// Field type'ƒ±n hangi gruba ait olduƒüunu bul
export const getFieldTypeGroup = (fieldType: string) => {
  for (const [groupKey, group] of Object.entries(fieldTypeGroups)) {
    if (group.types.some(type => type.value === fieldType)) {
      return { key: groupKey, ...group };
    }
  }
  return null;
};

// Matematiksel i≈ülem yapabilen mi kontrol et
export const isMathCapable = (fieldType: string) => {
  const allTypes = Object.values(fieldTypeGroups).flatMap(group => group.types);
  const type = allTypes.find(t => t.value === fieldType);
  return type?.mathCapable || false;
};

// Gruba g√∂re field type'larƒ± getir
export const getTypesByGroup = (groupKey: string) => {
  return (fieldTypeGroups as any)[groupKey]?.types || [];
};

// Matematiksel operasyon yapƒ±labilir field √ßiftlerini bul
export const getCompatibleMathTypes = (type1: string, type2: string) => {
  const group1 = getFieldTypeGroup(type1);
  const group2 = getFieldTypeGroup(type2);
  
  // Aynƒ± grup i√ßindeki tipler uyumlu
  if (group1?.key === group2?.key) return true;
  
  // Finansal + Matematiksel uyumlu
  if ((group1?.key === 'financial' && group2?.key === 'mathematical') ||
      (group1?.key === 'mathematical' && group2?.key === 'financial')) return true;
  
  // √ñl√ß√ºm + Matematiksel uyumlu  
  if ((group1?.key === 'measurement' && group2?.key === 'mathematical') ||
      (group1?.key === 'mathematical' && group2?.key === 'measurement')) return true;
      
  return false;
}; 